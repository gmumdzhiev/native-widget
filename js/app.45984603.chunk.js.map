{"version":3,"sources":["store/features/activity/apiAction/fetchActivityTree.ts","store/features/activity/activitySlice.ts","components/EditScreenInfo/EditScreenInfo.tsx","store/features/userSettings/fetchUserSettings.ts","store/features/menu/apiAction/fetchActivityMenu.ts","store/features/menu/menuSlice.ts","components/TabBarIcon/TabBarIcon.tsx","screens/TabOneScreen/index.tsx","structure/Activity/Activity.tsx","screens/TabTwoScreen/index.tsx","App.tsx","services/AuthenticationProvider/AuthenticationProvider.tsx","store/features/userSettings/transformer/userSettingsTransformer.ts","store/features/userSettings/initialSettingsState.ts","common/interface/IThunkError.ts","store/features/activity/transformer/activityTransformer.ts","store/features/menu/transformer/menuTransformer.ts","store/features/menu/initialActivityMenuState.ts","store/store.ts","store/features/userSettings/reducer/index.ts","store/features/activity/reducer/index.ts","store/features/activity/initialActivityState.ts","store/features/menu/reducer/index.ts","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf","navigation/index.tsx","navigation/LinkingConfiguration.ts","navigation/RootNavigator/RootNavigator.tsx","screens/ModalScreen/ModalScreen.tsx","screens/ModalScreen/style.ts","components/MonoText/MonoText.tsx","components/MonoText/style.ts","components/EditScreenInfo/style.ts","navigation/RootNavigator/components/AppNavigation/AppNavigation.tsx","screens/TabOneScreen/style.ts","structure/Activity/style.ts","screens/TabTwoScreen/style.ts","navigation/RootNavigator/components/WebNavigation/WebNavigation.tsx","store/features/userSettings/settingsSlice.ts","common/hooks.ts"],"names":["fetchActivityTree","createAsyncThunk","async","establishmentId","establishmentIdStr","toString","fetch","method","response","json","data","activityTreeTransformer","activitySlice","createSlice","name","initialState","reducers","extraReducers","builder","addCase","pending","state","status","rejected","action","error","payload","message","fulfilled","list","reducer","activities","handleHelpPress","WebBrowser","openBrowserAsync","path","GetStartedContainer","GetStartedText","CodeHighlightContainer","MonoText","HelpContainer","HelpLink","onPress","HelpLinkText","fetchUserSettings","userSettingsTransformer","fetchActivityMenu","map","apiActivity","menuTransformer","menuSlice","menu","color","FontAwesome","size","style","marginBottom","settingsList","useAppSelector","settingsStateSelector","activityState","activitiesStateSelector","console","log","TabOneScreenMainWrapper","TabOneScreenHeader","TabOneScreenSeparator","EditScreenInfo","Activity","dispatch","useAppDispatch","useState","selectedActivityCategory","setSelectedActivityCategory","activityCategoryLayout","setActivityCategoryLayout","getEstablishmentId","localStorage","getItem","activityStateSelector","stringToHsl","text","saturation","lightness","hash","i","length","charCodeAt","useEffect","parseInt","onActivityClicked","activityId","filter","obj","id","activity","ActivitiesScreenMainWrapper","ActivitiesScreenHeader","ActivitiesContainer","ActivitiesBlock","key","ActivitiesBlockText","ActivitiesSeparator","TabTwoScreenMainWrapper","TabTwoScreenHeader","TabTwoScreenSeparator","App","useCachedResources","Provider","store","AuthenticationProvider","SafeAreaProvider","Navigation","StatusBar","AppRegistry","registerComponent","runApplication","initialProps","rootTag","document","getElementById","children","establishmentSettings","menuStateSelector","window","location","href","substring","lastIndexOf","then","e","isInstanceOfIThunkError","isMenuVisible","endPointData","uuid","isActive","is_active","backgroundColor","background_color","highlightColor","highlight_color","fontColor","font_color","fontFamily","font_family","opacity","isPersonPreferenceMandatory","is_person_preference_mandatory","isPreferredPersonPerService","is_preferred_person_per_service","isExtraServicesVisible","is_extra_services_visible","isMultipleCustomersEnabled","is_multiple_customers_enabled","is_menu_visible","locale","maxFreeMoments","max_free_moments","isShowAllButtonVisible","is_show_all_button_visible","isSeamlessIntegrated","is_seamless_integrated","onlineAppointmentsRemarksEnabled","online_appointments_remarks_enabled","daysToCancel","days_to_cancel","daysBeforeNotAllowedToMove","days_before_not_allowed_to_move","maxMonthsInAdvance","max_months_in_advance","daysNotActive","days_not_active","selectLocation","select_location","locations","image","numberOfMomentsIndicatingBusy","number_of_moments_indicating_busy","isOnlinePaymentEnabled","is_online_payment_enabled","onlineAppointmentsDepositOnlyForNewCustomers","online_appointments_deposit_only_for_new_customers","onlineAppointmentsDepositForSpecificCustomers","online_appointments_deposit_for_specific_customers","facebookPixel","facebook_pixel","backgroundImage","background_image","onlineAppointmentsExistingCustomersOnly","online_appointments_existing_customers_only","onlineAppointmentsExistingCustomersOnlyMessage","online_appointments_existing_customers_only_message","onlineAppointmentsShowWeekdayName","online_appointments_show_weekday_name","useNewOnlineBooking","use_new_online_booking","onlineAppointmentsListView","online_appointments_list_view","onlineAppointmentsAllowNoPreferenceSelection","online_appointments_allow_no_preference_selection","onlineAppointmentsShowPrice","online_appointments_show_price","onlineAppointmentsShowDuration","online_appointments_show_duration","annulationCondition","annulation_condition","onlineAppointmentsNewFreeMomentFinder","online_appointments_new_free_moment_finder","object","errorType","activityTransformer","categoryId","category_id","deposit","description","duration","isOnline","is_online","order","personChoice","person_choice","personsAmount","person_amount","price","waitTime","wait_time","menuEstablishmentTransformer","establishment_id","isPersonSelectable","is_person_selectable","vatPercentage","vat_percentage","menuActivitiesTransformer","personAmount","establishmentDetails","establishment_details","establishment","parentId","parent_id","isMenu","is_menu","categories","category","configureStore","settings","settingsReducer","activityReducer","menuReducer","middleware","getDefaultMiddleware","serializableCheck","isLoadingComplete","setLoadingComplete","SplashScreen","preventAutoHideAsync","Font","loadAsync","font","require","warn","hideAsync","module","exports","pathname","split","setItem","String","Linking","makeUrl","NavigationContainer","linking","LinkingConfiguration","RootNavigator","prefixes","config","screens","Root","TabOne","TabOneScreen","TabTwo","TabTwoScreen","Modal","NotFound","Stack","createNativeStackNavigator","isPlatformWeb","Platform","OS","width","useWindowDimensions","isLayoutBreak","Navigator","Screen","component","WebNavigation","AppNavigation","options","headerShown","Group","screenOptions","presentation","ModalScreen","ModalContainer","ModalHeader","ModalSeparator","styled","View","Text","MonoTextComponent","TouchableOpacity","BottomTab","createBottomTabNavigator","initialRouteName","navigation","title","tabBarIcon","TabBarIcon","headerRight","navigate","pressed","marginRight","Drawer","createDrawerNavigator","fetchedLocations","setFetchedLocations","defaultStatus","drawerType","overlayColor","drawerIcon","ActivitiesScreen","settingsSlice","useDispatch","useSelector"],"mappings":"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","file":"static/js/app.45984603.chunk.js","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { IActivityTree, IAPIActivityTree } from '../interface/IActivityTree'\r\nimport { activityTreeTransformer } from '../transformer/activityTransformer'\r\n\r\nexport const fetchActivityTree = createAsyncThunk<\r\n  IActivityTree[],\r\n  { establishmentId: number | null },\r\n  { rejectValue: Error }\r\n>('activity/fetch', async ({ establishmentId }) => {\r\n  const establishmentIdStr = !establishmentId || establishmentId.toString()\r\n  const response = await fetch(\r\n    `${process.env.API_URL}/anonymous/calendar/activity-tree?establishment_id=${establishmentIdStr}`,\r\n    { method: 'GET' }\r\n  )\r\n  const data: IAPIActivityTree[] = await response.json()\r\n  // return data\r\n  return activityTreeTransformer(data)\r\n})\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport { fetchActivityTree } from './apiAction/fetchActivityTree'\r\nimport { initialState } from './initialActivityState'\r\nimport { RootState } from '../../store'\r\n\r\nexport const activitySlice = createSlice({\r\n  name: 'activities',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchActivityTree.pending, (state) => ({\r\n      ...state,\r\n      status: 'loading',\r\n    }))\r\n\r\n    builder.addCase(fetchActivityTree.rejected, (state, action) => ({\r\n      ...state,\r\n      error: action.payload\r\n        ? action.payload.message\r\n        : 'Failed to get activities',\r\n      status: 'failed',\r\n    }))\r\n\r\n    builder.addCase(fetchActivityTree.fulfilled, (state, action) => ({\r\n      ...state,\r\n      list: [...action.payload],\r\n      status: 'succeeded',\r\n    }))\r\n  },\r\n})\r\nexport default activitySlice.reducer\r\n\r\nexport const activitiesStateSelector = (state: RootState) => state.activities\r\n","import * as React from 'react'\r\nimport * as WebBrowser from 'expo-web-browser'\r\nimport { MonoText } from '../MonoText/MonoText'\r\nimport {\r\n  CodeHighlightContainer,\r\n  GetStartedContainer,\r\n  GetStartedText,\r\n  HelpContainer,\r\n  HelpLink,\r\n  HelpLinkText,\r\n} from './style'\r\n\r\nfunction handleHelpPress() {\r\n  WebBrowser.openBrowserAsync(\r\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\r\n  )\r\n}\r\n\r\nexport const EditScreenInfo = ({ path }: { path: string }) => (\r\n  <>\r\n    <GetStartedContainer>\r\n      <GetStartedText>Open up the code for this screen:</GetStartedText>\r\n\r\n      <CodeHighlightContainer>\r\n        <MonoText>{path}</MonoText>\r\n      </CodeHighlightContainer>\r\n\r\n      <GetStartedText>\r\n        Change any of the text, save the file, and your app will automatically\r\n        update.\r\n      </GetStartedText>\r\n    </GetStartedContainer>\r\n\r\n    <HelpContainer>\r\n      <HelpLink onPress={handleHelpPress}>\r\n        <HelpLinkText>\r\n          Tap here if your app doesn&apos;t automatically update after making\r\n          changes\r\n        </HelpLinkText>\r\n      </HelpLink>\r\n    </HelpContainer>\r\n  </>\r\n)\r\n","import { createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { IAPIUserSettings, IUserSettings } from './interface/IUserSettings'\r\nimport { userSettingsTransformer } from './transformer/userSettingsTransformer'\r\nimport { IThunkError } from '../../../common/interface/IThunkError'\r\n\r\nexport const fetchUserSettings = createAsyncThunk<\r\n  IUserSettings,\r\n  { establishmentId: string },\r\n  { rejectValue: IThunkError }\r\n>('settings/fetch', async ({ establishmentId }) => {\r\n  const response = await fetch(\r\n    `${process.env.API_URL}/anonymous/online-booking-info?establishment_id=${establishmentId}`,\r\n    { method: 'GET' }\r\n  )\r\n  const data: IAPIUserSettings = await response.json()\r\n\r\n  return userSettingsTransformer(data)\r\n})\r\n","import { createAsyncThunk } from '@reduxjs/toolkit'\r\nimport {\r\n  IActivityMenuCategories,\r\n  IAPIActivityMenuCategories,\r\n} from '../interface/IActivityMenuCategories'\r\nimport { menuTransformer } from '../transformer/menuTransformer'\r\n\r\nexport const fetchActivityMenu = createAsyncThunk<\r\n  IActivityMenuCategories[],\r\n  { establishmentId: string | null },\r\n  { rejectValue: Error }\r\n>('activity-menu/fetch', async ({ establishmentId }) => {\r\n  const establishmentIdStr = !establishmentId || establishmentId.toString()\r\n  const response = await fetch(\r\n    `${process.env.API_URL}/anonymous/activity-menu?establishment_id=${establishmentIdStr}`,\r\n    { method: 'GET' }\r\n  )\r\n\r\n  const data: IAPIActivityMenuCategories[] = await response.json()\r\n\r\n  return data.map((apiActivity) => menuTransformer(apiActivity))\r\n})\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport { fetchActivityMenu } from './apiAction/fetchActivityMenu'\r\nimport { initialState } from './initialActivityMenuState'\r\nimport { RootState } from '../../store'\r\n\r\nexport const menuSlice = createSlice({\r\n  name: 'menu',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchActivityMenu.pending, (state) => ({\r\n      ...state,\r\n      status: 'loading',\r\n    }))\r\n\r\n    builder.addCase(fetchActivityMenu.rejected, (state, action) => ({\r\n      ...state,\r\n      error: action.payload\r\n        ? action.payload.message\r\n        : 'Failed to get menu data',\r\n      status: 'failed',\r\n    }))\r\n\r\n    builder.addCase(fetchActivityMenu.fulfilled, (state,action)=>({\r\n      ...state,\r\n      list: [...action.payload],\r\n      status: 'succeeded'\r\n    }))\r\n  },\r\n})\r\n\r\nexport default menuSlice.reducer\r\n\r\nexport const menuStateSelector = (state: RootState) => state.menu\r\n","import { FontAwesome } from \"@expo/vector-icons\";\r\nimport React, { FunctionComponent } from \"react\";\r\nimport { IProps } from \"./IProps\";\r\n\r\nexport const TabBarIcon: FunctionComponent<IProps> = ({ name, color }) => (\r\n  <FontAwesome\r\n    size={30}\r\n    style={{ marginBottom: -3 }}\r\n    name={name}\r\n    color={color}\r\n  />\r\n);\r\n","import React, { FunctionComponent } from 'react'\r\nimport { EditScreenInfo } from '../../components/EditScreenInfo/EditScreenInfo'\r\nimport {\r\n  TabOneScreenHeader,\r\n  TabOneScreenMainWrapper,\r\n  TabOneScreenSeparator,\r\n} from './style'\r\nimport { useAppSelector } from '../../common/hooks'\r\nimport { settingsStateSelector } from '../../store/features/userSettings/settingsSlice'\r\nimport { activitiesStateSelector } from '../../store/features/activity/activitySlice'\r\nimport { Activity } from '../../structure/Activity/Activity'\r\n\r\nexport const TabOneScreen: FunctionComponent = () => {\r\n  const settingsList = useAppSelector(settingsStateSelector).list\r\n  const activityState = useAppSelector(activitiesStateSelector).list\r\n  console.log(settingsList, activityState)\r\n\r\n  return (\r\n    <TabOneScreenMainWrapper>\r\n      <TabOneScreenHeader>Tab One</TabOneScreenHeader>\r\n      <TabOneScreenSeparator />\r\n      <EditScreenInfo path=\"/screens/TabOneScreen/ModalScreen.tsx\" />\r\n      <Activity />\r\n    </TabOneScreenMainWrapper>\r\n  )\r\n}\r\n","import React, { FunctionComponent, useEffect, useState } from 'react'\r\n\r\nimport { Text } from 'react-native'\r\nimport {\r\n  ActivitiesBlock,\r\n  ActivitiesBlockText,\r\n  ActivitiesContainer,\r\n  ActivitiesScreenHeader,\r\n  ActivitiesScreenMainWrapper,\r\n  ActivitiesSeparator,\r\n} from './style'\r\nimport { useAppDispatch, useAppSelector } from '../../common/hooks'\r\nimport { fetchActivityTree } from '../../store/features/activity/apiAction/fetchActivityTree'\r\nimport { activitiesStateSelector } from '../../store/features/activity/activitySlice'\r\nimport { IActivity } from '../../store/features/activity/interface/IActivity'\r\nimport { settingsStateSelector } from '../../store/features/userSettings/settingsSlice'\r\n\r\nexport const Activity: FunctionComponent = () => {\r\n  const dispatch = useAppDispatch()\r\n  const [selectedActivityCategory, setSelectedActivityCategory] = useState<\r\n    IActivity[] | undefined\r\n  >([])\r\n  const [activityCategoryLayout, setActivityCategoryLayout] =\r\n    useState<boolean>(false)\r\n  const getEstablishmentId = localStorage.getItem('establishmentId')\r\n\r\n  const activityStateSelector = useAppSelector(activitiesStateSelector).list\r\n  const settings = useAppSelector(settingsStateSelector)\r\n\r\n  const stringToHsl = (text: string, saturation: number, lightness: number) => {\r\n    let hash = 0\r\n    for (let i = 0; i < text.length; i += 1) {\r\n      hash = text.charCodeAt(i) + ((hash << 5) - hash)\r\n    }\r\n\r\n    const hue = hash % 360\r\n\r\n    return `hsl(${hue}, ${saturation}%, ${lightness}%)`\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (getEstablishmentId) {\r\n      dispatch(\r\n        fetchActivityTree({ establishmentId: parseInt(getEstablishmentId, 10) })\r\n      )\r\n    }\r\n  }, [])\r\n\r\n  const onActivityClicked = (activityId: number) => {\r\n    if (activityStateSelector === null) {\r\n      return <Text>Loading...</Text>\r\n    }\r\n\r\n    const filterSelectedActivity = activityStateSelector.filter(\r\n      (obj) => obj.id === activityId\r\n    )\r\n\r\n    filterSelectedActivity.map((activity) =>\r\n      setSelectedActivityCategory(activity.activities)\r\n    )\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <ActivitiesScreenMainWrapper>\r\n      <ActivitiesScreenHeader>Activities</ActivitiesScreenHeader>\r\n      <ActivitiesContainer>\r\n        {activityStateSelector && !activityCategoryLayout\r\n          ? activityStateSelector.map((activity) => (\r\n              <ActivitiesBlock\r\n                key={activity.id}\r\n                onPress={() => {\r\n                  onActivityClicked(activity.id)\r\n                  setActivityCategoryLayout(true)\r\n                }}\r\n                color={stringToHsl(activity.name, 50, 50)}\r\n              >\r\n                <ActivitiesBlockText>{activity.name}</ActivitiesBlockText>\r\n              </ActivitiesBlock>\r\n            ))\r\n          : activityCategoryLayout &&\r\n            selectedActivityCategory &&\r\n            selectedActivityCategory.map((activity) => (\r\n              <ActivitiesBlock\r\n                key={activity.id}\r\n                onPress={() => {\r\n                  onActivityClicked(activity.id)\r\n                  setActivityCategoryLayout(true)\r\n                }}\r\n                color={activity.color}\r\n              >\r\n                <ActivitiesBlockText>{activity.name}</ActivitiesBlockText>\r\n              </ActivitiesBlock>\r\n            ))}\r\n\r\n        {}\r\n      </ActivitiesContainer>\r\n      <ActivitiesSeparator />\r\n    </ActivitiesScreenMainWrapper>\r\n  )\r\n}\r\n","import React, { FunctionComponent } from 'react'\r\nimport {\r\n  TabTwoScreenHeader,\r\n  TabTwoScreenMainWrapper,\r\n  TabTwoScreenSeparator,\r\n} from './style'\r\nimport { EditScreenInfo } from '../../components/EditScreenInfo/EditScreenInfo'\r\n\r\nexport const TabTwoScreen: FunctionComponent = () => (\r\n  <TabTwoScreenMainWrapper>\r\n    <TabTwoScreenHeader>Tab Two</TabTwoScreenHeader>\r\n    <TabTwoScreenSeparator />\r\n    <EditScreenInfo path=\"/screens/TabOneScreen/ModalScreen.tsx\" />\r\n  </TabTwoScreenMainWrapper>\r\n)\r\n","import * as React from 'react'\r\nimport { StatusBar } from 'expo-status-bar'\r\nimport { SafeAreaProvider } from 'react-native-safe-area-context'\r\nimport { Provider } from 'react-redux'\r\nimport { AppRegistry } from 'react-native-web';\r\nimport ReactDOMServer from 'react-dom/server';\r\nimport { AuthenticationProvider } from './services/AuthenticationProvider/AuthenticationProvider'\r\nimport { store } from './store/store'\r\n\r\nimport useCachedResources from './hooks/useCachedResources'\r\nimport { Navigation } from './navigation'\r\n\r\n\r\n\r\nexport default function App() {\r\n  const isLoadingComplete = useCachedResources()\r\n\r\n\r\n  if (!isLoadingComplete) {\r\n    return null\r\n  }\r\n\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <AuthenticationProvider>\r\n        <SafeAreaProvider>\r\n          <Navigation />\r\n          <StatusBar />\r\n        </SafeAreaProvider>\r\n      </AuthenticationProvider>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nAppRegistry.registerComponent('online-booking', () => App);\r\n\r\nAppRegistry.runApplication('online-booking', {\r\n  initialProps: {},\r\n  rootTag: document.getElementById('root')\r\n})\r\n\r\n// register the app\r\n// AppRegistry.registerComponent('online-booking', () => App)\r\n\r\n\r\n// prerender the app\r\n// const { element, getStyleElement } = AppRegistry.getApplication('online-booking');\r\n// const html = ReactDOMServer.renderToString(element);\r\n//\r\n// console.log('html', html)\r\n//\r\n// console.log(element)\r\n// console.log(getStyleElement)\r\n//\r\n// const css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\r\n//\r\n// console.log('css', css)\r\n\r\n// AppRegistry.registerComponent('online-booking', () => App);\r\n//\r\n// AppRegistry.runApplication('online-booking', {\r\n//   initialProps: {},\r\n//   rootTag: document.getElementById('root')\r\n// });\r\n\r\n","import React, { FunctionComponent, useEffect } from 'react'\r\nimport { View, Text } from 'react-native'\r\nimport { fetchUserSettings } from '../../store/features/userSettings/fetchUserSettings'\r\n\r\nimport { settingsStateSelector } from '../../store/features/userSettings/settingsSlice'\r\nimport { useAppDispatch, useAppSelector } from '../../common/hooks'\r\nimport { isInstanceOfIThunkError } from '../../common/interface/IThunkError'\r\nimport { fetchActivityTree } from '../../store/features/activity/apiAction/fetchActivityTree'\r\nimport { fetchActivityMenu } from '../../store/features/menu/apiAction/fetchActivityMenu'\r\nimport {menuStateSelector} from \"../../store/features/menu/menuSlice\";\r\n\r\nexport const AuthenticationProvider: FunctionComponent = ({ children }) => {\r\n  const dispatch = useAppDispatch()\r\n\r\n  const establishmentSettings = useAppSelector(settingsStateSelector)\r\n\r\n  const menu = useAppSelector(menuStateSelector)\r\n\r\n  console.log(menu)\r\n\r\n  const getEstablishmentId = window.location.href.substring(\r\n    window.location.href.lastIndexOf('/') + 1\r\n  )\r\n  useEffect(() => {\r\n    //JUST FOR TEST THE MENU API CALL\r\n    dispatch(fetchActivityMenu({ establishmentId: getEstablishmentId }))\r\n\r\n    if (establishmentSettings.status === 'idle') {\r\n      dispatch(fetchUserSettings({ establishmentId: getEstablishmentId })).then(\r\n        (e) => {\r\n          if (\r\n            typeof e.payload !== 'undefined' &&\r\n            !isInstanceOfIThunkError(e.payload) &&\r\n            e.payload.id\r\n          ) {\r\n            const fetchStructure = e.payload.isMenuVisible ? 'menu' : 'activity'\r\n            switch (fetchStructure) {\r\n              case 'activity':\r\n                dispatch(fetchActivityTree({ establishmentId: 1 }))\r\n                break\r\n              default:\r\n                return null\r\n            }\r\n          }\r\n        }\r\n      )\r\n    }\r\n  }, [dispatch])\r\n\r\n  if (establishmentSettings.status === 'idle') {\r\n    return (\r\n      <View>\r\n        <Text>Loading...</Text>\r\n      </View>\r\n    )\r\n  }\r\n\r\n  return <>{children}</>\r\n}\r\n","import { IAPIUserSettings, IUserSettings } from '../interface/IUserSettings'\r\n\r\nexport const userSettingsTransformer = (\r\n  endPointData: IAPIUserSettings\r\n): IUserSettings =>\r\n  <IUserSettings>{\r\n    id: endPointData.id,\r\n    uuid: endPointData.uuid,\r\n    isActive: endPointData.is_active,\r\n    message: endPointData.message,\r\n    backgroundColor: endPointData.background_color,\r\n    highlightColor: endPointData.highlight_color,\r\n    fontColor: endPointData.font_color,\r\n    fontFamily: endPointData.font_family,\r\n    opacity: endPointData.opacity,\r\n    isPersonPreferenceMandatory: endPointData.is_person_preference_mandatory,\r\n    isPreferredPersonPerService: endPointData.is_preferred_person_per_service,\r\n    isExtraServicesVisible: endPointData.is_extra_services_visible,\r\n    isMultipleCustomersEnabled: endPointData.is_multiple_customers_enabled,\r\n    isMenuVisible: endPointData.is_menu_visible,\r\n    locale: endPointData.locale,\r\n    maxFreeMoments: endPointData.max_free_moments,\r\n    isShowAllButtonVisible: endPointData.is_show_all_button_visible,\r\n    isSeamlessIntegrated: endPointData.is_seamless_integrated,\r\n    onlineAppointmentsRemarksEnabled:\r\n      endPointData.online_appointments_remarks_enabled,\r\n    daysToCancel: endPointData.days_to_cancel,\r\n    daysBeforeNotAllowedToMove: endPointData.days_before_not_allowed_to_move,\r\n    maxMonthsInAdvance: endPointData.max_months_in_advance,\r\n    daysNotActive: endPointData.days_not_active,\r\n    selectLocation: endPointData.select_location,\r\n    locations:\r\n      typeof endPointData.locations !== 'undefined' &&\r\n      endPointData.locations.map((location) => ({\r\n        id: location.id,\r\n        image: location.image,\r\n        name: location.name,\r\n      })),\r\n    numberOfMomentsIndicatingBusy:\r\n      endPointData.number_of_moments_indicating_busy,\r\n    isOnlinePaymentEnabled: endPointData.is_online_payment_enabled,\r\n    onlineAppointmentsDepositOnlyForNewCustomers:\r\n      endPointData.online_appointments_deposit_only_for_new_customers,\r\n    onlineAppointmentsDepositForSpecificCustomers:\r\n      endPointData.online_appointments_deposit_for_specific_customers,\r\n    facebookPixel: endPointData.facebook_pixel,\r\n    backgroundImage: endPointData.background_image,\r\n    onlineAppointmentsExistingCustomersOnly:\r\n      endPointData.online_appointments_existing_customers_only,\r\n    onlineAppointmentsExistingCustomersOnlyMessage:\r\n      endPointData.online_appointments_existing_customers_only_message,\r\n    onlineAppointmentsShowWeekdayName:\r\n      endPointData.online_appointments_show_weekday_name,\r\n    useNewOnlineBooking: endPointData.use_new_online_booking,\r\n    onlineAppointmentsListView: endPointData.online_appointments_list_view,\r\n    onlineAppointmentsAllowNoPreferenceSelection:\r\n      endPointData.online_appointments_allow_no_preference_selection,\r\n    onlineAppointmentsShowPrice: endPointData.online_appointments_show_price,\r\n    onlineAppointmentsShowDuration:\r\n      endPointData.online_appointments_show_duration,\r\n    annulationCondition: endPointData.annulation_condition,\r\n    onlineAppointmentsNewFreeMomentFinder:\r\n      endPointData.online_appointments_new_free_moment_finder,\r\n  }\r\n","import { IInitialSettingsState } from './interface/ISettingsState'\r\n\r\nexport const initialState: IInitialSettingsState = {\r\n  list: null,\r\n  status: 'idle',\r\n  error: null,\r\n}\r\n","export type TErrorType = 'transform_failed'\r\n    | 'fetch_error'\r\n    | 'delete_error'\r\n    | 'post_error'\r\n    | 'exception'\r\n    | 'not_found'\r\n    | 'invalid_credentials'\r\n    | 'unauthorized'\r\n\r\nexport interface IThunkError {\r\n    message: string\r\n    errorType: TErrorType\r\n    toastType?: 'success' | 'error' | 'info' | 'warning'\r\n    toastTitle?: string\r\n    toastEmoji?: string\r\n}\r\n\r\nexport function isInstanceOfIThunkError(object: any): object is IThunkError {\r\n  return object.errorType in object\r\n}\r\n","import { IActivityTree, IAPIActivityTree } from '../interface/IActivityTree'\r\n\r\nimport { IActivity, IAPIActivity } from '../interface/IActivity'\r\n\r\nexport const activityTransformer = (endPointData: IAPIActivity): IActivity => ({\r\n  categoryId: endPointData.category_id,\r\n  color: endPointData.color,\r\n  deposit: endPointData.deposit,\r\n  description: endPointData.description,\r\n  duration: endPointData.duration,\r\n  id: endPointData.id,\r\n  image: endPointData.image,\r\n  isOnline: endPointData.is_online,\r\n  name: endPointData.name,\r\n  order: endPointData.order,\r\n  personChoice: endPointData.person_choice,\r\n  personsAmount: endPointData.person_amount,\r\n  price: endPointData.price,\r\n  waitTime: endPointData.wait_time,\r\n})\r\n\r\nexport const activityTreeTransformer = (\r\n  endPointData: IAPIActivityTree[]\r\n): IActivityTree[] =>\r\n  endPointData.map((data) => ({\r\n    name: data.name,\r\n    id: data.id,\r\n    order: data.order,\r\n    activities:\r\n      typeof data.activities === 'undefined'\r\n        ? []\r\n        : data.activities.map((activity) => activityTransformer(activity)),\r\n  }))\r\n","import {\r\n  IActivityMenuCategories,\r\n  IAPIActivityMenuCategories,\r\n} from '../interface/IActivityMenuCategories'\r\nimport { IActivityMenu, IAPIActivityMenu } from '../interface/IActivityMenu'\r\nimport {\r\n  IActivityEstablishmentDetails,\r\n  IAPIActivityEstablishmentDetails,\r\n} from '../interface/IActivityEstablishmentDetails'\r\n\r\nexport const menuEstablishmentTransformer = (\r\n  endPointData: IAPIActivityEstablishmentDetails\r\n): IActivityEstablishmentDetails => ({\r\n  establishmentId: endPointData.establishment_id,\r\n  isPersonSelectable: endPointData.is_person_selectable,\r\n  price: endPointData.price,\r\n  vatPercentage: endPointData.vat_percentage,\r\n  deposit: endPointData.deposit,\r\n})\r\n\r\nexport const menuActivitiesTransformer = (\r\n  endPointData: IAPIActivityMenu\r\n): IActivityMenu => ({\r\n  id: endPointData.id,\r\n  uuid: endPointData.uuid,\r\n  name: endPointData.name,\r\n  order: endPointData.order,\r\n  personAmount: endPointData.person_amount,\r\n  categoryId: endPointData.category_id,\r\n  color: endPointData.color,\r\n  description: endPointData.description,\r\n  duration: endPointData.duration,\r\n  waitTime: endPointData.wait_time,\r\n  establishmentDetails:\r\n    typeof endPointData.establishment_details === 'undefined'\r\n      ? []\r\n      : endPointData.establishment_details.map((establishment) =>\r\n        menuEstablishmentTransformer(establishment)\r\n        ),\r\n})\r\n\r\nexport const menuTransformer = (\r\n  endPointData: IAPIActivityMenuCategories\r\n): IActivityMenuCategories => ({\r\n  id: endPointData.id,\r\n  name: endPointData.name,\r\n  description: endPointData.description,\r\n  order: endPointData.order,\r\n  parentId: endPointData.parent_id,\r\n  isMenu: endPointData.is_menu,\r\n  isOnline: endPointData.is_online,\r\n  categories:\r\n    typeof endPointData.categories === 'undefined'\r\n      ? []\r\n      : endPointData.categories.map((category) => menuTransformer(category)),\r\n\r\n  activities:\r\n    typeof endPointData.activities === 'undefined'\r\n      ? []\r\n      : endPointData.activities.map((activity) =>\r\n          menuActivitiesTransformer(activity)\r\n        ),\r\n})\r\n","import { IInitialActivityMenuState } from './interface/IActivityMenuState'\r\n\r\nexport const initialState: IInitialActivityMenuState = {\r\n  list: null,\r\n  status: 'idle',\r\n  error: null,\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport settingsReducer from './features/userSettings/reducer'\r\nimport activityReducer from './features/activity/reducer/index'\r\nimport menuReducer from './features/menu/reducer/index'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    settings: settingsReducer,\r\n    activities: activityReducer,\r\n    menu: menuReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({ serializableCheck: false }),\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch\r\n","export { default } from '../settingsSlice'\r\n","export { default } from '../activitySlice'\r\n","import { IInitialActivityState } from './interface/IActivityState'\r\n\r\nexport const initialState: IInitialActivityState = {\r\n  list: null,\r\n  status: 'idle',\r\n  error: null,\r\n}\r\n","export { default } from '../menuSlice'","import { FontAwesome } from '@expo/vector-icons'\r\nimport * as Font from 'expo-font'\r\nimport * as SplashScreen from 'expo-splash-screen'\r\nimport { useEffect, useState } from 'react'\r\n\r\nexport default function useCachedResources() {\r\n  const [isLoadingComplete, setLoadingComplete] = useState(false)\r\n\r\n  // Load any resources or data that we need prior to rendering the app\r\n  useEffect(() => {\r\n    async function loadResourcesAndDataAsync() {\r\n      try {\r\n        SplashScreen.preventAutoHideAsync()\r\n\r\n        // Load fonts\r\n        await Font.loadAsync({\r\n          ...FontAwesome.font,\r\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\r\n        })\r\n      } catch (e) {\r\n        // We might want to provide this error information to an error reporting service\r\n        console.warn(e)\r\n      } finally {\r\n        setLoadingComplete(true)\r\n        SplashScreen.hideAsync()\r\n      }\r\n    }\r\n\r\n    loadResourcesAndDataAsync()\r\n  }, [])\r\n\r\n  return isLoadingComplete\r\n}\r\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","import React, { FunctionComponent, useState } from 'react'\r\nimport { NavigationContainer } from '@react-navigation/native'\r\nimport * as Linking from 'expo-linking'\r\nimport LinkingConfiguration from './LinkingConfiguration'\r\nimport { RootNavigator } from './RootNavigator/RootNavigator'\r\n\r\nexport const Navigation: FunctionComponent = () => {\r\n  const path = window.location.pathname.split('/')\r\n\r\n  const [establishmentId, setEstablishmentId] = useState<string>(path[1])\r\n\r\n  localStorage.setItem('establishmentId', String(parseInt(establishmentId, 10)))\r\n\r\n  const config = {\r\n    prefixes: [Linking.makeUrl('/')],\r\n    config: {\r\n      screens: {\r\n        Root: {\r\n          path: '/:establishmentId',\r\n          parse: {\r\n            establishmentId: (id: string) => id,\r\n          },\r\n          screens: {\r\n            TabOne: { screens: { TabOneScreen: 'one' } },\r\n          },\r\n        },\r\n        Modal: 'modal',\r\n        NotFound: '*',\r\n      },\r\n    },\r\n  }\r\n\r\n  return (\r\n    <NavigationContainer linking={LinkingConfiguration}>\r\n      <RootNavigator />\r\n    </NavigationContainer>\r\n  )\r\n}\r\n","/**\r\n * Learn more about deep linking with React Navigation\r\n * https://reactnavigation.org/docs/deep-linking\r\n * https://reactnavigation.org/docs/configuring-links\r\n */\r\n\r\nimport { LinkingOptions } from '@react-navigation/native'\r\nimport * as Linking from 'expo-linking'\r\n\r\nimport { RootStackParamList } from '../types'\r\n\r\nconst linking: LinkingOptions<RootStackParamList> = {\r\n  prefixes: [Linking.makeUrl('/')],\r\n  config: {\r\n    screens: {\r\n      Root: {\r\n        screens: {\r\n          TabOne: { screens: { TabOneScreen: 'one' } },\r\n          TabTwo: { screens: { TabTwoScreen: 'two' } },\r\n        },\r\n      },\r\n      Modal: 'modal',\r\n      NotFound: '*',\r\n    },\r\n  },\r\n}\r\n\r\nexport default linking\r\n","import React, { FunctionComponent } from 'react'\r\nimport { Platform, useWindowDimensions } from 'react-native'\r\n\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack'\r\nimport { ModalScreen } from '../../screens/ModalScreen/ModalScreen'\r\nimport { AppNavigation } from './components/AppNavigation/AppNavigation'\r\nimport { WebNavigation } from './components/WebNavigation/WebNavigation'\r\n\r\nexport const RootNavigator: FunctionComponent = () => {\r\n  // const Stack = createNativeStackNavigator<RootStackParamList>()\r\n  const Stack = createNativeStackNavigator()\r\n  const isPlatformWeb: boolean = Platform.OS === 'web'\r\n  const { width } = useWindowDimensions()\r\n  const isBreak: boolean = width < 820\r\n  const isLayoutBreak: boolean = isPlatformWeb && !isBreak\r\n  console.log('ION')\r\n  return (\r\n    <Stack.Navigator>\r\n      <Stack.Screen\r\n        name=\"Root\"\r\n        component={isLayoutBreak ? WebNavigation : AppNavigation}\r\n        options={{ headerShown: false }}\r\n      />\r\n      {/* <Stack.Screen */}\r\n      {/*  name=\"NotFound\" */}\r\n      {/*  component={NotFoundScreen} */}\r\n      {/*  options={{ title: 'Oops!' }} */}\r\n      {/* /> */}\r\n      <Stack.Group screenOptions={{ presentation: 'modal' }}>\r\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\r\n      </Stack.Group>\r\n    </Stack.Navigator>\r\n  )\r\n}\r\n","import { StatusBar } from 'expo-status-bar'\r\nimport React, { FunctionComponent } from 'react'\r\nimport { Platform } from 'react-native'\r\nimport { ModalContainer, ModalHeader, ModalSeparator } from './style'\r\nimport { EditScreenInfo } from '../../components/EditScreenInfo/EditScreenInfo'\r\n\r\nexport const ModalScreen: FunctionComponent = () => (\r\n  <ModalContainer>\r\n    <ModalHeader>Modal</ModalHeader>\r\n    <ModalSeparator />\r\n    <EditScreenInfo path=\"/screens/ModalScreen.tsx\" />\r\n    {/* Use a light status bar on iOS to account for the black space above the modal */}\r\n    <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />\r\n  </ModalContainer>\r\n)\r\n","import styled from '@emotion/native'\r\n\r\nexport const ModalContainer = styled.View`\r\n  flex: 1;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nexport const ModalHeader = styled.Text`\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  color: #e3e3e3;\r\n`\r\n\r\nexport const ModalSeparator = styled.View`\r\n  margin: 0 30px;\r\n  height: 1px;\r\n  width: 80%;\r\n`\r\n","import * as React from 'react'\r\nimport { FunctionComponent } from 'react'\r\nimport { MonoTextComponent } from './style'\r\nimport { IProps } from './IProps'\r\n\r\nexport const MonoText: FunctionComponent<IProps> = ({ children }) => (\r\n  <MonoTextComponent>{children}</MonoTextComponent>\r\n)\r\n","import styled from '@emotion/native'\r\n\r\nexport const MonoTextComponent = styled.Text`\r\n  font-family: 'space-mono', sans-serif;\r\n`\r\n","import styled from '@emotion/native'\r\n\r\nexport const GetStartedContainer = styled.View`\r\n  align-items: center;\r\n  margin: 0 50px;\r\n`\r\n\r\nexport const CodeHighlightContainer = styled.View`\r\n  border-radius: 3px;\r\n  padding: 0 4px;\r\n`\r\n\r\nexport const GetStartedText = styled.Text`\r\n  color: rgba(255, 255, 255, 0.8);\r\n  font-size: 17px;\r\n  line-height: 24px;\r\n  text-align: center;\r\n`\r\n\r\nexport const HelpContainer = styled.View`\r\n  margin: 15px 20px 0 20px;\r\n`\r\n\r\nexport const HelpLink = styled.TouchableOpacity`\r\n  padding: 0 15px;\r\n`\r\nexport const HelpLinkText = styled.Text`\r\n  text-align: center;\r\n  color: #2f95dc;\r\n`\r\n","import { Pressable } from 'react-native'\r\nimport { FontAwesome } from '@expo/vector-icons'\r\nimport React, { FunctionComponent } from 'react'\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs'\r\nimport { RootTabParamList, RootTabScreenProps } from '../../../../types'\r\nimport { TabBarIcon } from '../../../../components/TabBarIcon/TabBarIcon'\r\nimport { LoginScreen } from '../../screens/LoginScreen/LoginScreen'\r\nimport { TabOneScreen } from '../../../../screens/TabOneScreen'\r\nimport { TabTwoScreen } from '../../../../screens/TabTwoScreen'\r\n\r\nexport const AppNavigation: FunctionComponent = () => {\r\n  const BottomTab = createBottomTabNavigator<RootTabParamList>()\r\n\r\n  return (\r\n    <BottomTab.Navigator initialRouteName=\"login\">\r\n      <BottomTab.Screen\r\n        name=\"TabOne\"\r\n        component={TabOneScreen}\r\n        options={({ navigation }: RootTabScreenProps<'TabOne'>) => ({\r\n          title: 'TabOne',\r\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\r\n          headerRight: () => (\r\n            <Pressable\r\n              onPress={() => navigation.navigate('Modal')}\r\n              style={({ pressed }) => ({ opacity: pressed ? 0.5 : 1 })}\r\n            >\r\n              <FontAwesome\r\n                name=\"info-circle\"\r\n                size={25}\r\n                style={{ marginRight: 15 }}\r\n              />\r\n            </Pressable>\r\n          ),\r\n        })}\r\n      />\r\n\r\n      <BottomTab.Screen\r\n        name=\"TabTwo\"\r\n        component={TabTwoScreen}\r\n        options={({ navigation }: RootTabScreenProps<'TabTwo'>) => ({\r\n          title: 'TabTwo',\r\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\r\n          headerRight: () => (\r\n            <Pressable\r\n              onPress={() => navigation.navigate('Modal')}\r\n              style={({ pressed }) => ({ opacity: pressed ? 0.5 : 1 })}\r\n            >\r\n              <FontAwesome\r\n                name=\"info-circle\"\r\n                size={25}\r\n                style={{ marginRight: 15 }}\r\n              />\r\n            </Pressable>\r\n          ),\r\n        })}\r\n      />\r\n    </BottomTab.Navigator>\r\n  )\r\n}\r\n","import styled from '@emotion/native'\r\n\r\nexport const TabOneScreenMainWrapper = styled.View`\r\n  flex: 1;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nexport const TabOneScreenHeader = styled.Text`\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  color: #e3e3e3;\r\n`\r\nexport const TabOneScreenSeparator = styled.View`\r\n  margin: 0 30px;\r\n  height: 1px;\r\n  width: 80%;\r\n`\r\n","import styled from '@emotion/native'\r\n\r\nexport const ActivitiesScreenMainWrapper = styled.View`\r\n  flex: 1;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nexport const ActivitiesScreenHeader = styled.Text`\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  color: black;\r\n`\r\n\r\nexport const ActivitiesSeparator = styled.View`\r\n  margin: 0 30px;\r\n  height: 1px;\r\n  width: 80%;\r\n`\r\nexport const ActivitiesContainer = styled.View`\r\n  display: flex;\r\n       -webkit-box-pack: start\r\n   justify-content: flex-start;\r\n   flex-wrap: wrap;\r\n   -webkit-box-direction: normal;\r\n   -webkit-box-orient: horizontal;\r\n   flex-direction: row;\r\n       margin: 0 3.5em;\r\n  max-width: 776px;\r\n`\r\n\r\nexport const ActivitiesBlock = styled.TouchableOpacity<{color?: string}>`\r\n  background-color:  ${({ color }) => (!color ? '#005cd9' : color)};\r\n  width: 170px;\r\n  height: 170px;\r\n  border-radius: 4px;\r\n  padding: 8px;\r\n  margin: 12px;\r\n`\r\n\r\nexport const ActivitiesBlockText = styled.Text`\r\n   text-align: center;\r\n   line-height: 25px;\r\n   font-size: 18px;\r\n   color: white;\r\n   background: rgba(1, 1, 1, 0.2);\r\n   width: 100%;\r\n   border-radius: 4px 4px 0 0;\r\n`\r\n","import styled from '@emotion/native'\r\n\r\nexport const TabTwoScreenMainWrapper = styled.View`\r\n  flex: 1;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nexport const TabTwoScreenHeader = styled.Text`\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  color: #e3e3e3;\r\n`\r\nexport const TabTwoScreenSeparator = styled.View`\r\n  margin: 0 30px;\r\n  height: 1px;\r\n  width: 80%;\r\n`\r\n","import { Pressable } from 'react-native'\r\nimport { FontAwesome } from '@expo/vector-icons'\r\nimport React, { FunctionComponent, useEffect, useState } from 'react'\r\nimport { createDrawerNavigator } from '@react-navigation/drawer'\r\nimport { RootTabParamList, RootTabScreenProps } from '../../../../types'\r\nimport { TabBarIcon } from '../../../../components/TabBarIcon/TabBarIcon'\r\nimport { ILocation } from '../../../../store/features/userSettings/interface/ILocation'\r\nimport { useAppSelector } from '../../../../common/hooks'\r\nimport { settingsStateSelector } from '../../../../store/features/userSettings/settingsSlice'\r\nimport { TabOneScreen } from '../../../../screens/TabOneScreen'\r\nimport { TabTwoScreen } from '../../../../screens/TabTwoScreen'\r\nimport { ActivitiesScreen } from '../../../../structure/Activity/Activity'\r\n\r\nexport const WebNavigation: FunctionComponent = () => {\r\n  const Drawer = createDrawerNavigator<RootTabParamList>()\r\n  const [fetchedLocations, setFetchedLocations] = useState<ILocation[]>([])\r\n  const establishmentSettings = useAppSelector(settingsStateSelector)\r\n\r\n  useEffect(() => {\r\n    if (establishmentSettings.list) {\r\n      setFetchedLocations(establishmentSettings.list.locations || [])\r\n    }\r\n  }, [establishmentSettings])\r\n\r\n  if (!establishmentSettings) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Drawer.Navigator\r\n      defaultStatus=\"open\"\r\n      screenOptions={{\r\n        drawerType: 'permanent',\r\n        overlayColor: 'transparent',\r\n      }}\r\n    >\r\n      <Drawer.Screen\r\n        name=\"TabOne\"\r\n        component={TabOneScreen}\r\n        options={({ navigation }: RootTabScreenProps<'TabOne'>) => ({\r\n          title: 'TabOne',\r\n          drawerIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\r\n          headerRight: () => (\r\n            <Pressable\r\n              onPress={() => navigation.navigate('Modal')}\r\n              style={({ pressed }) => ({ opacity: pressed ? 0.5 : 1 })}\r\n            >\r\n              <FontAwesome\r\n                name=\"info-circle\"\r\n                size={25}\r\n                // TODO SHOULD GET FROM SETTINGS\r\n                color=\"salmon\"\r\n                style={{ marginRight: 15 }}\r\n              />\r\n            </Pressable>\r\n          ),\r\n        })}\r\n      />\r\n\r\n      <Drawer.Screen\r\n        name=\"TabTwo\"\r\n        component={TabTwoScreen}\r\n        options={({ navigation }: RootTabScreenProps<'TabTwo'>) => ({\r\n          title: 'TabTwo',\r\n          drawerIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\r\n          headerRight: () => (\r\n            <Pressable\r\n              onPress={() => navigation.navigate('Modal')}\r\n              style={({ pressed }) => ({ opacity: pressed ? 0.5 : 1 })}\r\n            >\r\n              <FontAwesome\r\n                name=\"info-circle\"\r\n                size={25}\r\n                // TODO SHOULD GET FROM SETTINGS\r\n                color=\"white\"\r\n                style={{ marginRight: 15 }}\r\n              />\r\n            </Pressable>\r\n          ),\r\n        })}\r\n      />\r\n\r\n      {fetchedLocations &&\r\n        fetchedLocations.map((location) => (\r\n          <Drawer.Screen\r\n            key={location.id}\r\n            name={location.name}\r\n            component={ActivitiesScreen}\r\n          />\r\n        ))}\r\n    </Drawer.Navigator>\r\n  )\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport { fetchUserSettings } from './fetchUserSettings'\r\nimport { initialState } from './initialSettingsState'\r\nimport { RootState } from '../../store'\r\n\r\nexport const settingsSlice = createSlice({\r\n  name: 'settings',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchUserSettings.pending, (state) => ({\r\n      ...state,\r\n      status: 'loading',\r\n    }))\r\n    builder.addCase(fetchUserSettings.rejected, (state, action) => ({\r\n      ...state,\r\n      error: action.payload\r\n        ? action.payload.message\r\n        : 'Failed to get the establishment settings',\r\n      status: 'failed',\r\n    }))\r\n    builder.addCase(fetchUserSettings.fulfilled, (state, action) => ({\r\n      ...state,\r\n      list: {\r\n        ...action.payload,\r\n      },\r\n      status: 'succeeded',\r\n    }))\r\n  },\r\n})\r\n\r\nexport default settingsSlice.reducer\r\n\r\nexport const settingsStateSelector = (state: RootState) => state.settings\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\n\r\nimport type { AppDispatch, RootState } from '../store/store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n"],"sourceRoot":""}